---
import Layout from '../../layouts/Layout.astro';
import Container from "../../components/Container.astro";
import { caseStudies } from '../../data/caseStudies';

export async function getStaticPaths() {
    return caseStudies.map(study => ({
        params: { id: study.id.toString() },
        props: { study }
    }));
}

const { id } = Astro.params;
const study = caseStudies.find(s => s.id.toString() === id);

// Handle 404 if study not found
if (!study) {
    return Astro.redirect('/404');
}
---

<Layout title={`${study.title} | MustMedia`}>
    <Container>
        <div class="py-24">
            <!-- Category Badge -->
            <div class="mb-8 text-center">
                <span class="inline-block px-4 py-1 bg-zime-44 text-white rounded-full text-sm">
                    {study.category}
                </span>
            </div>

            <!-- Title -->
            <h1 class="text-4xl font-bold text-center mb-8">{study.title}</h1>

            <!-- Metrics -->
            <div class="grid grid-cols-1 md:grid-cols-3 gap-8 mb-12">
                {study.metrics.map(metric => (
                    <div class="bg-white rounded-3xl border border-gray-100 shadow-card p-6 text-center">
                        <div class="flex items-center justify-center gap-2">
                            <span class="text-3xl font-bold text-zime-44">{metric.value}</span>
                            {metric.trend === 'up' && (
                                <svg class="w-6 h-6 text-green-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 10l7-7m0 0l7 7m-7-7v18"/>
                                </svg>
                            )}
                            {metric.trend === 'down' && (
                                <svg class="w-6 h-6 text-red-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 14l-7 7m0 0l-7-7m7 7V3"/>
                                </svg>
                            )}
                        </div>
                        <div class="text-zinc-600 mt-2">{metric.label}</div>
                    </div>
                ))}
            </div>

            <!-- Content Sections -->
            <div class="space-y-12 max-w-3xl mx-auto">
                <div>
                    <h2 class="text-2xl font-bold mb-4">Le DÃ©fi</h2>
                    <div class="text-zinc-600 space-y-4">
                        {study.challenge.split('\n').map(line => (
                            <p>{line}</p>
                        ))}
                    </div>
                </div>

                <div>
                    <h2 class="text-2xl font-bold mb-4">Notre Solution</h2>
                    <div class="text-zinc-600 space-y-4">
                        {study.solution.split('\n').map(line => (
                            <p>{line}</p>
                        ))}
                    </div>
                </div>

                <!-- Testimonial -->
                <blockquote class="bg-zinc-100 rounded-3xl p-8">
                    <p class="text-xl italic mb-4">"{study.testimonial.quote}"</p>
                    <footer>
                        <div class="font-semibold">{study.testimonial.author}</div>
                        <div class="text-zinc-600">{study.testimonial.position}</div>
                    </footer>
                </blockquote>
            </div>

            <!-- Growth Chart Section -->
            <div class="my-12 p-8 bg-white rounded-3xl border border-gray-100 shadow-card">
                <h2 class="text-2xl font-bold mb-6 text-center">Croissance sur 6 mois</h2>
                <canvas class="h-[400px] w-full" id="growthChart"></canvas>
            </div>
        </div>
    </Container>
</Layout>

<script define:vars={{ study }}>
    import Chart from 'chart.js/auto';
    
    // Get the canvas element
    const ctx = document.getElementById('growthChart')?.getContext('2d');
    
    if (ctx) {
        // Use actual data from the study
        const monthlyData = {
            labels: study.monthlyData.map(d => d.month),
            datasets: [
                {
                    label: 'Revenue',
                    data: study.monthlyData.map(d => d.revenue),
                    borderColor: '#63ADF2',
                    backgroundColor: 'rgba(99, 173, 242, 0.1)',
                    fill: true,
                    tension: 0.4
                },
                {
                    label: 'Orders',
                    data: study.monthlyData.map(d => d.orders),
                    borderColor: '#34D399',
                    backgroundColor: 'rgba(52, 211, 153, 0.1)',
                    fill: true,
                    tension: 0.4
                }
            ]
        };
        
        new Chart(ctx, {
            type: 'line',
            data: monthlyData,
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    legend: {
                        position: 'top',
                    },
                    title: {
                        display: false
                    }
                },
                scales: {
                    y: {
                        beginAtZero: true,
                        grid: {
                            color: 'rgba(0, 0, 0, 0.1)'
                        }
                    },
                    x: {
                        grid: {
                            display: false
                        }
                    }
                }
            }
        });
    }
</script> 