---
import Layout from '../layouts/Layout.astro';
import Container from "../components/Container.astro";
import Topic from "../components/Topic.astro";
import { caseStudies } from '../data/caseStudies';

// Extract unique categories from case studies
const categories = ['All', ...new Set(caseStudies.map(study => study.category))];
---

<Layout title="Case Studies | MustMedia">
    <div class="bg-[#0B0F19] text-white min-h-screen">
        <Container>
            <div class="py-24">
                <Topic 
                    title="Nos Réalisations" 
                    description="Découvrez comment nous aidons nos clients à atteindre leurs objectifs"
                />

                <!-- Filter Section -->
                <div class="flex flex-wrap justify-center gap-4 mt-12 mb-16">
                    {categories.map(category => (
                        <button 
                            class="filter-btn px-6 py-2 rounded-full border-2 border-zinc-700 text-zinc-300 hover:border-zime-44 hover:bg-zime-44 hover:text-white transition-all"
                            data-filter={category}
                            data-active={category === 'All' ? 'true' : 'false'}
                        >
                            {category}
                        </button>
                    ))}
                </div>

                <!-- Case Studies Grid -->
                <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
                    {caseStudies.map((study, index) => (
                        <div 
                            class="case-study-item relative rounded-3xl border border-zinc-700 shadow-xl overflow-hidden hover:border-zime-44 transition-all duration-300" 
                            data-category={study.category}
                            data-visible="true"
                        >
                            <!-- Background Image with Gradient -->
                            <div class="absolute inset-0 z-0">
                                <img 
                                    src={study.image} 
                                    alt={study.title} 
                                    class="w-full h-full object-cover"
                                />
                                <div class="absolute inset-0 bg-gradient-to-r from-[#0B0F19] via-[#0B0F19]/90 to-transparent"></div>
                            </div>

                            <div class="relative z-10 p-8 space-y-6">
                                <span class="inline-block px-4 py-1 bg-zime-44 text-white rounded-full text-sm">
                                    {study.category}
                                </span>
                                
                                <h3 class="text-2xl font-semibold text-white">{study.title}</h3>
                                
                                <p class="text-zinc-400">{study.description}</p>
                                
                                <!-- Growth Chart -->
                                <div class="h-[200px] w-full bg-[#1A1F2E]/50 rounded-xl p-4">
                                    <canvas id={`chart-${index}`} class="w-full h-full"></canvas>
                                </div>

                                <!-- Metrics with Trend Indicators -->
                                <div class="grid grid-cols-3 gap-4">
                                    {study.metrics.map(metric => (
                                        <div class="text-center p-3 bg-[#1A1F2E]/50 rounded-xl">
                                            <div class="flex items-center justify-center gap-1">
                                                <div class="text-2xl font-bold text-zime-44">{metric.value}</div>
                                                {metric.trend === 'up' && (
                                                    <svg class="w-4 h-4 text-green-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 10l7-7m0 0l7 7m-7-7v18"/>
                                                    </svg>
                                                )}
                                                {metric.trend === 'down' && (
                                                    <svg class="w-4 h-4 text-red-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 14l-7 7m0 0l-7-7m7 7V3"/>
                                                    </svg>
                                                )}
                                            </div>
                                            <div class="text-sm text-zinc-400">{metric.label}</div>
                                        </div>
                                    ))}
                                </div>

                                <div class="pt-4 border-t border-zinc-700/50">
                                    <a 
                                        href={`/case-studies/${study.id}`} 
                                        class="group inline-flex items-center gap-3 text-zime-44 hover:text-white transition-colors duration-300"
                                    >
                                        <span class="text-lg font-medium">En savoir plus</span>
                                        <svg 
                                            class="w-5 h-5 transform transition-transform duration-300 group-hover:translate-x-2" 
                                            fill="none" 
                                            stroke="currentColor" 
                                            viewBox="0 0 24 24"
                                        >
                                            <path 
                                                stroke-linecap="round" 
                                                stroke-linejoin="round" 
                                                stroke-width="2" 
                                                d="M17 8l4 4m0 0l-4 4m4-4H3"
                                            />
                                        </svg>
                                    </a>
                                </div>
                            </div>
                        </div>
                    ))}
                </div>
            </div>
        </Container>
    </div>
</Layout>

<style>
    .filter-btn.active {
        @apply bg-zime-44 text-white border-zime-44;
    }
    
    .filter-btn[data-active="true"] {
        @apply bg-zime-44 text-white border-zime-44;
    }
    
    .case-study-item[data-visible="false"] {
        display: none;
    }

    .case-study-item {
        opacity: 0;
        animation: fadeIn 0.5s ease-out forwards;
    }

    @keyframes fadeIn {
        from {
            opacity: 0;
            transform: translateY(20px);
        }
        to {
            opacity: 1;
            transform: translateY(0);
        }
    }
</style>

<script is:inline define:vars={{ serializedCaseStudies: JSON.stringify(caseStudies) }}>
    // Add type declaration for the global property
    window.caseStudiesData = JSON.parse(serializedCaseStudies);
</script>

<script>
    import Chart from 'chart.js/auto';
    import type { CaseStudy, MonthlyData } from '../data/caseStudies';

    // Type declaration for window with our custom property
    declare global {
        interface Window { 
            caseStudiesData: CaseStudy[] 
        }
    }

    // Initialize charts for each case study
    document.addEventListener('astro:page-load', () => {
        const caseStudies: CaseStudy[] = window.caseStudiesData || [];
        
        caseStudies.forEach((study: CaseStudy, index: number) => {
            const ctx = document.getElementById(`chart-${index}`) as HTMLCanvasElement | null;
            if (!ctx) return;
            
            const monthlyData: MonthlyData[] = study.monthlyData || [];
            if (!monthlyData.length) return;

            // Create chart
            new Chart(ctx, {
                type: 'line',
                data: {
                    labels: monthlyData.map((data: MonthlyData) => data.month),
                    datasets: [{
                        label: 'Croissance',
                        data: monthlyData.map((data: MonthlyData) => data.revenue),
                        borderColor: '#B9FF66',
                        backgroundColor: 'rgba(185, 255, 102, 0.1)',
                        tension: 0.4,
                        fill: true,
                        borderWidth: 2,
                        pointRadius: 3,
                        pointHoverRadius: 5
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            display: false
                        },
                        tooltip: {
                            backgroundColor: 'rgba(17, 24, 39, 0.8)',
                            titleColor: '#fff',
                            bodyColor: '#9CA3AF',
                            padding: 10,
                            borderColor: 'rgba(255, 255, 255, 0.1)',
                            borderWidth: 1,
                            displayColors: false
                        }
                    },
                    scales: {
                        y: {
                            beginAtZero: true,
                            grid: {
                                color: 'rgba(255, 255, 255, 0.1)'
                            },
                            ticks: {
                                color: '#9CA3AF',
                                display: false
                            }
                        },
                        x: {
                            grid: {
                                display: false
                            },
                            ticks: {
                                color: '#9CA3AF',
                                display: false
                            }
                        }
                    }
                }
            });
        });

        // Filter functionality
        const filterButtons = document.querySelectorAll('.filter-btn');
        const caseStudyItems = document.querySelectorAll('.case-study-item');

        filterButtons.forEach(button => {
            button.addEventListener('click', () => {
                const filter = button.getAttribute('data-filter');
                
                // Update active state of buttons
                filterButtons.forEach(btn => {
                    btn.setAttribute('data-active', 'false');
                });
                button.setAttribute('data-active', 'true');

                // Filter case studies with animation
                caseStudyItems.forEach(item => {
                    const category = item.getAttribute('data-category');
                    if (filter === 'All' || category === filter) {
                        // Show with animation
                        const element = item as HTMLElement;
                        element.style.animation = 'none';
                        element.offsetHeight; // Trigger reflow
                        element.style.animation = 'fadeIn 0.5s ease-out forwards';
                        item.setAttribute('data-visible', 'true');
                    } else {
                        // Hide
                        item.setAttribute('data-visible', 'false');
                    }
                });

                // Refresh visible charts after filter
                setTimeout(() => {
                    caseStudyItems.forEach((item, idx) => {
                        if (item.getAttribute('data-visible') === 'true') {
                            const chart = Chart.getChart(`chart-${idx}`);
                            if (chart) {
                                chart.resize();
                            }
                        }
                    });
                }, 100);
            });
        });
    });
</script> 